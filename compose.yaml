services:
    
  cart-service:
    image: shop-cart-service
    build:
      context: .
      dockerfile: CartService/CartService/Dockerfile
    pull_policy: build
    environment:
      CONNECTION_STRING: Host=postgres:5432;Username=postgres;Password=P@ssw0rd;Database=CartDb
      RMQ_HOST: rabbitmq
      RMQ_PORT: 5672
      RMQ_USER: guest
      RMQ_PASSWORD: guest
      RMQ_CART_PRODUCT_QUEUE: cart-product-messages-queue
      RMQ_PRODUCT_EXCHANGE: product-messages-exchange
      
    healthcheck:
      test: "curl -f http://localhost:8080/health"
      interval: 5s
      timeout: 5s
      retries: 5
    
    restart: unless-stopped
    
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - shop-network
      - shop-pg-network
  
  favorite-service:
    image: shop-favorite-service
    build:
      context: .
      dockerfile: FavoriteService/FavoriteService/Dockerfile
    pull_policy: build
    environment:
      CONNECTION_STRING: Host=postgres:5432;Username=postgres;Password=P@ssw0rd;Database=CartDb

    healthcheck:
      test: "curl -f http://localhost:8080/health"
      interval: 5s
      timeout: 5s
      retries: 5

    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

    networks:
      - shop-network
      - shop-pg-network

  orders-service:
    image: shop-orders-service
    build:
      context: .
      dockerfile: OrdersService/Dockerfile
    pull_policy: build
    environment:
      CONNECTION_STRING: Host=postgres:5432;Username=postgres;Password=P@ssw0rd;Database=Orders

    healthcheck:
      test: "curl -f http://localhost:8080/health"
      interval: 5s
      timeout: 5s
      retries: 5

    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

    networks:
      - shop-network
      - shop-pg-network
  
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: P@ssw0rd
    ports:
      - "5432:5432"
    networks:
      - shop-pg-network
    labels:
      - app=shop
      
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      timeout: 5s
      retries: 5
      
      
  rabbitmq:
    image: rabbitmq:4.1-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    
    restart: unless-stopped
    
    networks:
      - shop-network
    labels:
      - app=shop
    healthcheck:
      test: "rabbitmqctl status > /dev/null 2>&1;"
      interval: 5s
      timeout: 5s
      retries: 5
 
  nginx-proxy:
    image: nginx:stable
    ports:
      - "80:80"
    volumes:
      - ./ApiGate/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ApiGate:/etc/nginx/ApiGate:ro

    depends_on:
      cart-service:
        condition: service_healthy
      favorite-service:
          condition: service_healthy
        
    restart: unless-stopped

    networks:
      - shop-network
    labels:
      - app=shop


networks:
  shop-network:
    name: shop-network
    labels:
      - app=shop
  shop-pg-network:
    name: shop-pg-network
    labels:
      - app=shop    
